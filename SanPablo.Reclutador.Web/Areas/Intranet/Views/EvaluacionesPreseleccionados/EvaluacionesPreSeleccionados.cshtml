@model SanPablo.Reclutador.Web.Areas.Intranet.Models.EvaluacionesPreSeleccionadosViewModel
@{
    ViewBag.Title = "EvaluacionesPreSeleccionados";
}
@section Head{
}

@section Scripts{

<script type="text/javascript">
    $(document).ready(function () {

        $('#btnProgramarEvaluacion').click(function () {

            var id = jQuery('#grdList').jqGrid('getGridParam', 'selrow');
            var rowData = jQuery('#grdList').jqGrid('getRowData', id);

            var idReclutaExamen = rowData.IdeRecluPersoExam;
            var nombreResponsable = rowData.Responsable;
            if (idReclutaExamen != null && idReclutaExamen > 0)  {
                var url = '@Url.Action("ProgramarEvaluacion", "EvaluacionesPreSeleccionados", new { id = "",area="Intranet" })?id=' + idReclutaExamen + '&responsable=' + nombreResponsable;
                window.location = url;
            } else {
                MostrarMensaje('Seleccione un exámen a programar', "Sistema de Reclutamiento Y Seleccion de Personal");
            }

        });


        jQuery("#grdList").jqGrid({
            datatype: function (postdata) {
                var migrilla = new Object();
                migrilla.page = postdata.page;
                migrilla.rows = postdata.rows;
                migrilla.sidx = postdata.sidx;
                migrilla.sord = postdata.sord;
                migrilla._search = postdata.isSearch;
                migrilla.filters = postdata.filters;
                migrilla.Rules = [

                    { field: 'idRecluPers', data: $("#ReclutaPersona_IdeReclutaPersona").val() },
                    { field: 'idPostulante', data: $("#PostulantePreSel_IdePostulante").val() }

                ];

                if (migrilla._search == true) {
                    migrilla.searchField = postdata.searchField;
                    migrilla.searchOper = postdata.searchOper;
                    migrilla.searchString = postdata.searchString;
                }

                var params = { grid: migrilla };

                $.ajax({
                    url: '@Url.Action("ListEvaluacionesPost", "EvaluacionesPreSeleccionados", new { area = "Intranet"})',
                    type: 'post',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(params),
                    async: false,
                    success: function (data, st) {
                        if (st == 'success') {
                            var jq = $('#grdList')[0];
                            jq.addJSONData(data);
                        }
                    },
                    error: function (e) {
                        console.log(e);
                    }
                });
            },
            colNames: ['','','','Descripci&oacuten', 'Tipo', 'Fecha', 'Hora','', 'Responsable','', 'Estado', 'Ptje.Total', 'Resultado',''],
            colModel: [
                     { name: 'IdeRecluPersoExam', index: 'IdeRecluPersoExam', align: 'left', editable: false, sortable: false, hidden: true },
                     { name: 'IdeReclutaPersona', index: 'IdeReclutaPersona', align: 'left', editable: false, sortable: false, hidden: true },
                     { name: 'IdeEvaluacion', index: 'IdeEvaluacion', align: 'left', editable: false, sortable: false, hidden: true },
                     { name: 'Descripcion', index: 'Descripcion', align: 'left', formatter: DescripcionFormatter },
                     { name: 'Tipo', index: 'Tipo', align: 'left', editable: false, sortable: false },
                     { name: 'Fecha', index: 'Fecha', align: 'center', editable: false, sortable: false, width: 100 },
                     { name: 'Hora', index: 'Hora', align: 'center', editable: false, sortable: false, width: 90 },
                     { name: 'IdeUsuarioResp', index: 'IdeUsuarioResp', align: 'center', editable: false, sortable: false, hidden: true },
                     { name: 'Responsable', index: 'Responsable', align: 'center', editable: false, sortable: false, width: 300 },
                     { name: 'TipoEstado', index: 'TipoEstado', align: 'center', editable: false, sortable: false, hidden:true },
                     { name: 'Estado', index: 'Estado', align: 'center', editable: false, sortable: false, width: 130 },
                     { name: 'PuntajeTotal', index: 'PuntajeTotal', align: 'center', editable: false, sortable: false, width: 150 },
                     { name: 'Notas', index: 'Notas', align: 'center', sortable: false, width: 60, formatter: NotaFormatter },
                     { name: 'Comentario', index: 'Comentario', align: 'center', sortable: false, hidden: true }

            ],

            pager: jQuery('#grdPager'),
            rowNum: 10,
            rowList: [10, 30, 50],
            autowidth: true,
            rules: true,
            //sortname: 'Descripcion', actualizar dato
            sortorder: 'desc',
            viewrecords: true,
            height: 350,
            cellsubmit: 'clientArray',
            hidegrid: false,
            rownumbers: true,
            shrinkToFit: false,

            postData: {
            }, loadComplete: function (data) {
            }
        });


        
        $('#updateDialog').dialog({
            autoOpen: false,
            width: 460,
            height: 450,
            resizable: false,
            modal: true,
            buttons: {
                "Grabar": function (e) {
                    e.preventDefault();
                    var result = $('#PopupResultadoForm').valid();
                    if (result) {
                        $.post('@Url.Action("PopupResultado", "EvaluacionesPreSeleccionados")',
                                $("#PopupResultadoForm").serialize(),
                                function (respuesta) {
                                    if (respuesta.Resultado) {
                                        $("#updateDialog").dialog("close");
                                        $('#grdList').trigger('reloadGrid');
                                    }
                                    else {
                                        notificacionError(respuesta.Mensaje);
                                    }
                                });
                    }
                    else {
                        notificacionError("ERROR: Verifique que los datos ingresados sean correctos");
                    }
                },
                "Cancelar": function () {
                    $(this).dialog("close");
                }
            }
        });
        
                
    });

    function DescripcionFormatter(cellvalue, options, rowObject) {
        var strAref = cellvalue;
        //validar si existe la evaluacion
        strAref = '<a style="text-decoration: underline" href="@Url.Action("ResultadoEvaluacion", "EvaluacionPreseleccionados")">' + rowObject[0] + '/' + rowObject[1] + '</a>';
        return strAref;
      }

    function NotaFormatter(cellvalue, options, rowObject) {
        var strImg = "";
        var imgPath = '@Url.Content("~/Content/images/")';
        var archivo = 'application.gif';
        if (rowObject[0] != "2100001") {            
            strImg = '<img onclick="mostraringresoocomentario(' + rowObject[0] + ');" src="' + imgPath + archivo + '" width="16" height="16" title="Ingresar Nota" alt="Ingresar Nota">';
        }            
        return strImg;
    }

    function RadioFormatter(cellvalue, options, rowObject) {       
        var strRdo = '<input type ="radio" name = "codigo">';
        return strRdo;
        }
    
        function ResultadoFormatter(cellvalue, options, rowObject) {
            var imgPath = '@Url.Content("~/Content/images/")';
            var archivo = 'application.gif';
            var strImg = '<a href="@Url.Action("ResultadoExamen1", "Operaciones")"><img src="' + imgPath + archivo + '" width="16" height="16" title="Ver Resultado" alt="Ver Resultado"></a>';
            return strImg;
        }

    function mostraringresoocomentario(idReclutaPersoExam) {
        //var idReclutaPersoExam = jQuery('#grdList').jqGrid('getGridParam', 'selrow');
        //if (idReclutaPersoExam != null && idReclutaPersoExam > 0) {
        $.ajax({
            data: {
                id: idReclutaPersoExam
            },
            type: "POST",
            url: '@Url.Action("verificarProgramacion", "EvaluacionesPreSeleccionados")',
            traditional: true,
            success: function (data) {
            if (data.Resultado) {
                var dialogDiv = $('#updateDialog');
                $.get('@Url.Action("PopupResultado", "EvaluacionesPreSeleccionados")', { id: idReclutaPersoExam }, function (data) {
                dialogDiv.html(data);
                $.validator.unobtrusive.parse($("#updateDialog"));
                dialogDiv.dialog('open');
                });
            }
            else {
                MostrarMensaje("Debe programar la evaluacion para ingresar los resultados","Reclutamiento y Selección de personal");
            }
         }
        });


            
        //}
   }

</script>
}

@using (Html.BeginForm("Index", "Ranking", FormMethod.Post, new { id = "frmPopupCvPostulante" }))
{
    @Html.ValidationSummary(true)

<div class="row">
    <div class="span12">
        <div class="widget-box">
            <div class="widget-title">
                <h5>Evaluaciones</h5>
            </div>
            <form class="formulario-busqueda">

            <div class="grilla-opciones" style="margin-top:0px;">
                <h6>Datos Evaluación</h6>
                <div style="clear:both"></div>
            </div>
            <table class="formulario-busqueda">
                <tr class="formulario-fila">
                    <td class="span5">
                        <label class="control-label" for="inputSuccess">Solicitud</label>
                    <div class="controles">
                        @Html.TextBoxFor(model => model.ReclutaPersona.IdeReclutaPersona, new { style = "display: none"})
                        @Html.TextBoxFor(model => model.PostulantePreSel.IdePostulante, new { style = "display: none"})
                        @Html.TextBoxFor(model => model.Solicitud.CodSolReqPersonal, new { disabled = "disabled" })
                    </div>
                    </td>
                    <td class="span5">
                        <label class="control-label" for="inputSuccess">Cargo</label>
                        <div class="controles">
                         @Html.TextBoxFor(model => model.Solicitud.nombreCargo, new { disabled = "disabled" })
                       </div>
                   </td>
            </tr>
                <tr class="formulario-fila">
                <td class="span5">
                    <div class="">
                        <label class="control-label" for="inputSuccess">Sede</label>
                        <div class="controles">
                            @Html.TextBoxFor(model => model.Solicitud.Sede_des, new { disabled = "disabled" })
                        </div>
                    </div>
                </td>                    
                <td class="span5">
                    <div class="">
                        <label class="control-label" for="inputSuccess">Dependencia</label>
                        <div class="controles">
                            @Html.TextBoxFor(model => model.Solicitud.Dependencia_des, new { disabled = "disabled" })
                        </div>
                    </div>
                </td>
            </tr>
                <tr class="formulario-fila">
                <td class="span5">
                    <div class="">
                        <label class="control-label" for="inputSuccess">Departamento</label>
                        <div class="controles">
                            @Html.TextBoxFor(model => model.Solicitud.Departamento_des, new { disabled = "disabled" })
                        </div>
                    </div>
                </td>                    
                <td class="span5">
                    <div class="">
                        <label class="control-label" for="inputSuccess">Area</label>
                        <div class="controles">
                            @Html.TextBoxFor(model => model.Solicitud.Area_des, new { disabled = "disabled" })
                        </div>
                    </div>
                </td>
            </tr>
            </table>
            <div class="grilla-opciones" style="margin-top:0px;">
                <h6>Datos del Postulante</h6>
                <div style="clear:both"></div>
            </div>

            <table class="formulario-busqueda">
                <tr class="formulario-fila">
                <td class="span5">
                    <div class="">
                        <label class="control-label" for="inputSuccess">Nombre</label>
                        <div class="controles">
                            @Html.TextBoxFor(model => model.PostulantePreSel.NombreCompleto, new { disabled = "disabled" })
                        </div>
                    </div>
                </td>                    
                <td class="span5">
                    <div class="">
                        <label class="control-label" for="inputSuccess">Correo</label>
                        <div class="controles">
                            @Html.TextBoxFor(model => model.PostulantePreSel.Correo, new { disabled = "disabled" })
                        </div>
                    </div>
                </td>
            </tr>
                <tr class="formulario-fila">
                <td class="span5">
                    <div class="">
                        <label class="control-label" for="inputSuccess">Teléfono</label>
                        <div class="controles">
                            @Html.TextBoxFor(model => model.PostulantePreSel.TelefonoFijo, new { disabled = "disabled" })
                        </div>
                    </div>
                </td>                    
                <td class="span5">
                    <div class="">
                        <label class="control-label" for="inputSuccess">Móvil</label>
                        <div class="controles">
                            @Html.TextBoxFor(model => model.PostulantePreSel.TelefonoMovil, new { disabled = "disabled" })
                        </div>
                    </div>
                </td>
            </tr>
            </table>
                
            <div class="grilla-opciones" style="margin-top:0px;">
                <h6>Evaluaciones</h6>
                <div style="clear:both"></div>
            </div>            
            <div style="width: 100%;">
                <div>
                    <table id="grdList">
                    </table>
                    <div id="grdPager">
                    </div>
                </div>
            </div>
            </form>

            <div class="form-actions">
                <a class="btn" href="@Url.Action("PostulantesPreSeleccionados", "SolicitudCargo")"><i class="icon-arrow-left icon-cog"></i> Anterior</a>
                <a class="btn btn-info" href="@Url.Action("ProgramarEvaluacion", "SolicitudCargo")"><i class="icon-time icon-white"></i> Progra. Evalu.</a>                        
                <a class="btn btn-info" id="btnProgramarEvaluacion"><i class="icon-time icon-white"></i> Progra. Evalu.</a>                        
            </div>
        </div>
    </div>
</div>

}

<div id="updateDialog" title="Resultado"></div>
    <div id="divMensaje">
        <span id="spanMensaje"></span>
    </div>